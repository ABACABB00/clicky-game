{"version":3,"sources":["components/Wrapper/wrapper.js","components/Header/header.js","components/Card/card.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","score","highscore","Card","onClick","clickCounts","id","alt","name","src","image","App","state","cards","endGame","setState","console","log","this","forEach","card","count","alert","find","o","i","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kiEAMeA,G,MAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,YCS1CC,G,MATA,SAAAH,GAAK,OAChB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAASD,EAAME,UAC9B,yBAAKD,UAAU,UAAf,UACYD,EAAMI,MADlB,iBACuCJ,EAAMK,c,OCGtCC,G,MARF,SAAAN,GAAK,OACd,yBAAKC,UAAU,OAAOM,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMS,MACzD,yBAAKR,UAAU,iBACX,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,YCwD9BC,E,4MAvDbC,MAAQ,CACNC,QACAZ,MAAO,EACPC,UAAW,G,EAGbY,QAAU,WAWR,OAVI,EAAKF,MAAMX,MAAQ,EAAKW,MAAMV,WAChC,EAAKa,SAAS,CAACb,UAAW,EAAKU,MAAMX,QAAQ,WAC3Ce,QAAQC,IAAIC,KAAKN,MAAMV,cAG3B,EAAKU,MAAMC,MAAMM,SAAQ,SAAAC,GACvBA,EAAKC,MAAQ,KAEfC,MAAM,wBAAD,OAAyB,EAAKV,MAAMX,QACzC,EAAKc,SAAS,CAACd,MAAO,KACf,G,EAGTI,YAAc,SAAAC,GACZ,EAAKM,MAAMC,MAAMU,MAAK,SAACC,EAAGC,GACxB,GAAGD,EAAElB,KAAOA,EAAI,CACd,GAAsB,IAAnBO,EAAMY,GAAGJ,MAMR,OALFR,EAAMY,GAAGJ,MAAQR,EAAMY,GAAGJ,MAAO,EACjC,EAAKN,SAAS,CAACd,MAAO,EAAKW,MAAMX,MAAQ,IAAI,WAC3Ce,QAAQC,IAAIC,KAAKN,MAAMX,UAEzB,EAAKW,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACnC,EAGT,EAAKd,e,uDAMH,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQb,MAAOiB,KAAKN,MAAMX,MAAOC,UAAWgB,KAAKN,MAAMV,WAAvD,sBACCgB,KAAKN,MAAMC,MAAMgB,KAAI,SAAAT,GAAI,OACxB,kBAAC,EAAD,CACEf,YAAa,EAAKA,YAClBC,GAAIc,EAAKd,GACTwB,IAAKV,EAAKd,GACVI,MAAOU,EAAKV,gB,GAhDNqB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.8aa573ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './header.css';\r\n\r\n\r\nconst Header = props => (\r\n    <div className=\"header\">\r\n        <div className=\"title\">{props.children}</div>\r\n        <div className=\"scores\">\r\n            Score: {props.score} | Highscore: {props.highscore}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = props => (\r\n    <div className=\"card\" onClick={() => props.clickCounts(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport Wrapper from \"./components/Wrapper/wrapper\";\r\nimport Header from \"./components/Header/header\";\r\nimport cards from \"./cards.json\";\r\nimport Card from \"./components/Card/card\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cards,\r\n    score: 0,\r\n    highscore: 0\r\n  };\r\n\r\n  endGame = () => {\r\n    if (this.state.score > this.state.highscore) {\r\n      this.setState({highscore: this.state.score}, function() {\r\n        console.log(this.state.highscore);\r\n      });\r\n    }\r\n    this.state.cards.forEach(card => {\r\n      card.count = 0;\r\n    });\r\n    alert(`Game Over : \\nscore: ${this.state.score}`);\r\n    this.setState({score: 0});\r\n    return true;\r\n  }\r\n  \r\n  clickCounts = id => {\r\n    this.state.cards.find((o, i) => {\r\n      if(o.id === id) {\r\n        if(cards[i].count === 0) {\r\n          cards[i].count = cards[i].count +1; \r\n          this.setState({score: this.state.score + 1}, function() {\r\n            console.log(this.state.score);\r\n          });\r\n          this.state.cards.sort(() => Math.random() - 0.5);\r\n            return true;\r\n        } \r\n        else {\r\n          this.endGame();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Header score={this.state.score} highscore={this.state.highscore}>Naruto Clicky Game</Header>\r\n        {this.state.cards.map(card => (\r\n          <Card\r\n            clickCounts={this.clickCounts}\r\n            id={card.id}\r\n            key={card.id}\r\n            image={card.image}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}